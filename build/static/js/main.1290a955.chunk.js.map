{"version":3,"sources":["components/LogoButtom.tsx","components/SettingButton.tsx","components/NavBar.tsx","components/NewNote/Line.tsx","components/NewNote/NoteTextField.tsx","components/NewNote/NewNoteContainer.tsx","components/NoteList/ListItem.tsx","components/NoteList/ListWrapper.tsx","pages/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LogoButtom","Button","onClick","console","log","variant","useStyles","makeStyles","root","fontSize","SettingButton","classes","Box","display","alignItems","backgroundColor","NavBar","Container","maxWidth","justifyContent","width","Line","className","NoteTextField","props","TextField","InputProps","disableUnderline","placeholder","fullWidth","multiline","id","onChange","value","defaultValue","wrapper","paddingBottom","paddingTop","flexDirection","borderRadius","borderColor","borderWidth","borderStyle","paddingLeft","paddingRight","inputs","NewNoteContainer","React","useState","note","setNote","subject","setSubject","alert","key","Math","random","localStorage","setItem","renderCallback","e","target","cursor","modalRoot","marginTop","ListItem","open","setOpen","changedNote","setChangedNote","textLine","item","split","title","modalHandler","Modal","onClose","currentKey","setNewRender","color","removeItem","navigator","clipboard","writeText","ListWrapper","items","setItems","keys","setKeys","newRender","isLoaded","setIsLoaded","useEffect","data","dataKeys","push","getItem","dataForRerender","map","i","MainPage","render","setRender","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kQAYeA,MATf,WAEE,OACE,cAACC,EAAA,EAAD,CAAQC,QAFgB,kBAAMC,QAAQC,IAAI,wBAENC,QAAQ,YAA5C,mB,iBCFEC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,UAqBCC,MAjBf,WACE,IAAMC,EAAUL,IAEhB,OACE,cAACL,EAAA,EAAD,UACE,eAACW,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAA/B,UACE,cAAC,IAAD,CACEH,QAAS,CACPH,KAAMG,EAAQH,QAHpB,iBCVAF,EAAYC,YAAW,CAC3BC,KAAM,CACJO,gBAAiB,uBA6BNC,MAzBf,WACE,IAAML,EAAUL,IAEhB,OACE,cAACW,EAAA,EAAD,CACEC,SAAS,KACTP,QAAS,CACPH,KAAMG,EAAQH,MAHlB,SAME,cAACI,EAAA,EAAD,CAAKC,QAAQ,OAAOM,eAAe,SAAnC,SACE,eAACP,EAAA,EAAD,CACEQ,MAAM,MACNP,QAAQ,OACRC,WAAW,SACXK,eAAe,gBAJjB,UAME,cAAC,EAAD,IACA,cAAC,EAAD,YCvBKE,MAJf,WACE,OAAO,qBAAKC,UAAU,U,SCwBTC,MAff,SAAuBC,GACrB,OACE,cAACC,EAAA,EAAD,CACEC,WAAY,CAAEC,kBAAkB,GAChCC,YAAaJ,EAAMI,YACnBC,WAAW,EACXC,WAAW,EACXC,GAAG,iBACHC,SAAUR,EAAMQ,SAChBC,MAAOT,EAAMS,MACbC,aAAcV,EAAMU,gBCjBpB5B,EAAYC,YAAW,CAC3B4B,QAAS,CACPC,cAAe,OACfC,WAAY,OACZxB,QAAS,OACTyB,cAAe,MACfnB,eAAgB,UAElBX,KAAM,CACJ+B,aAAc,OACdC,YAAa,qBACbC,YAAa,MACbrB,MAAO,OACPsB,YAAa,QACbN,cAAe,OACfO,YAAa,EACbC,aAAc,GAEhBC,OAAQ,CACNF,YAAa,OACbC,aAAc,UA8EHE,MAxEf,SAA0BtB,GACxB,IAAMb,EAAUL,IAChB,EAAwByC,IAAMC,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,IAAMC,SAAS,IAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KA6BA,OANAjD,QAAQC,IAAI,UAOV,cAACa,EAAA,EAAD,CACEN,QAAS,CACPH,KAAMG,EAAQwB,SAFlB,SAKE,cAACvB,EAAA,EAAD,CAAKQ,MAAM,MAAX,SACE,eAACH,EAAA,EAAD,CACEN,QAAS,CACPH,KAAMG,EAAQH,MAFlB,UAKE,cAACP,EAAA,EAAD,CAAQC,QAvCU,WAGxB,GAFAC,QAAQC,IAAI6C,EAAME,IAEbF,IAASE,EAGZ,OAFAhD,QAAQC,IAAI6C,EAAME,QAClBE,MAAM,0BAGR,IAAMC,EAAG,UAAsB,IAAhBC,KAAKC,UACdvB,EAAQgB,EAAO,IAAME,EAC3BM,aAAaC,QAAQJ,EAAKrB,GAC1BiB,EAAQ,IACRE,EAAW,IACX5B,EAAMmC,eAAe,KA0BqBtD,QAAQ,OAA5C,6BAGA,cAAC,EAAD,IACA,eAACY,EAAA,EAAD,CACEN,QAAS,CACPH,KAAMG,EAAQkC,QAFlB,UAKE,cAAC,EAAD,CACEb,SA3Be,SACzB4B,GAEAR,EAAWQ,EAAEC,OAAO5B,QAyBVL,YAAa,UACbK,MAAOkB,IAET,cAAC,EAAD,IAEA,cAAC,EAAD,CACElB,MAAOgB,EACPjB,SAzCY,SACtB4B,GAEAV,EAAQU,EAAEC,OAAO5B,QAuCPL,YAAa,oB,SClFrBtB,EAAYC,YAAW,CAC3BC,KAAM,CACJ+B,aAAc,OACdC,YAAa,qBACbC,YAAa,MACbrB,MAAO,MACPsB,YAAa,QACbN,cAAe,OACfO,YAAa,EACbC,aAAc,EACdkB,OAAQ,WAEVC,UAAW,CACTC,UAAW,OACXzB,aAAc,OACdC,YAAa,qBACbC,YAAa,MACb5B,QAAS,OACTO,MAAO,MACPsB,YAAa,QACbN,cAAe,OACfO,YAAa,EACbC,aAAc,EACd7B,gBAAiB,UAyGNkD,MAtGf,SAAkBzC,GAChB,MAAwBuB,IAAMC,UAAS,GAAvC,mBAAOkB,EAAP,KAAaC,EAAb,KACA,EAAsCpB,IAAMC,SAAS,IAArD,mBAAOoB,EAAP,KAAoBC,EAApB,KACA,EAA8BtB,IAAMC,SAAS,IAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KAaMzC,EAAUL,IACVgE,EAAW9C,EAAM+C,KAAKC,MAAM,KAC5BC,EAAQH,EAAS,GACjBrB,EAAOqB,EAAS,GAEhBI,EAAe,kBAAMP,GAASD,IAgBpC,OACE,qCACE,cAACtD,EAAA,EAAD,CAAKQ,MAAM,MAAMlB,QAASwE,EAA1B,SACE,eAACzD,EAAA,EAAD,CACEN,QAAS,CACPH,KAAMG,EAAQH,MAFlB,UAKGiE,EACD,cAAC,EAAD,IACCxB,EACD,cAAC,EAAD,SAGJ,cAAC0B,EAAA,EAAD,CACET,KAAMA,EACNU,QAASF,EACT,kBAAgB,qBAChB,mBAAiB,2BAJnB,SAME,mCACE,eAACzD,EAAA,EAAD,CACEN,QAAS,CACPH,KAAMG,EAAQoD,WAFlB,UAKE,eAACnD,EAAA,EAAD,WACE,cAAC,EAAD,CACEoB,SAtDa,SACzB4B,GAEAR,EAAWQ,EAAEC,OAAO5B,QAoDRC,aAAcuC,IAEhB,cAAC,EAAD,IACA,cAAC,EAAD,CAAezC,SAhEH,SACtB4B,GAEAS,EAAeT,EAAEC,OAAO5B,QA6D4BC,aAAce,IACxD,cAAC,EAAD,OAEF,eAACrC,EAAA,EAAD,CAAKQ,MAAM,MAAX,UACE,cAACnB,EAAA,EAAD,CACEC,QA1CM,WAClBuD,aAAaC,QAAQlC,EAAMqD,WAAY1B,EAAU,IAAMiB,GACvD5C,EAAMsD,aAAa,KAyCPzE,QAAQ,YACR0E,MAAM,YAHR,0BAOA,cAAC9E,EAAA,EAAD,CACEC,QAtDQ,WACpBuD,aAAauB,WAAWxD,EAAMqD,YAC9BrD,EAAMsD,aAAa,KAqDPzE,QAAQ,YACR0E,MAAM,YAHR,oBAOA,cAAC9E,EAAA,EAAD,CACEC,QAjEW,WACvB+E,UAAUC,UAAUC,UAAUlC,IAiElB5C,QAAQ,YACR0E,MAAM,YAHR,kDChFCK,MAtCf,SAAqB5D,GACnB,MAA0BuB,IAAMC,SAAwB,IAAxD,mBAAOqC,EAAP,KAAcC,EAAd,KACA,EAAwBvC,IAAMC,SAAwB,IAAtD,mBAAOuC,EAAP,KAAaC,EAAb,KACA,EAAkCzC,IAAMC,SAAS,IAAjD,mBAAOyC,EAAP,KAAkBX,EAAlB,KACA,EAAgC/B,IAAMC,UAAS,GAA/C,mBAAO0C,EAAP,KAAiBC,EAAjB,KAgBA,OAfAC,qBAAU,WACR,IAAMC,EAAsB,GACtBC,EAA0B,GAEhC,IAAK,IAAMxC,KAAOG,aAAc,CAC9BqC,EAASC,KAAKzC,GACd,IAAMiB,EAAsBd,aAAauC,QAAQ1C,GAC7CiB,GACFsB,EAAKE,KAAKxB,GAGde,EAASO,GACTL,EAAQM,GACRH,GAAY,KACX,CAACF,EAAWjE,EAAMyE,kBAEnB,qBAAK3E,UAAU,oBAAf,SACGoE,GACCL,EAAMa,KAAI,SAAC3B,EAAM4B,GACf,IAAMtB,EAAaU,EAAKY,GACxB,OACE,cAAC,EAAD,CAEE5B,KAAMA,EACNM,WAAYA,EACZC,aAAcA,GAHTD,SCdJuB,MAff,WACE,MAA4BrD,IAAMC,SAAqB,IAAvD,mBAAOqD,EAAP,KAAeC,EAAf,KAKA,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAkB3C,eANC,WACrB2C,EAAU,OAMR,cAAC,EAAD,CAAaL,gBAAiBI,QCHrBE,MARf,WACE,OACE,qBAAKjF,UAAU,MAAf,SACE,cAAC,EAAD,OCOSkF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1290a955.chunk.js","sourcesContent":["import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nfunction LogoButtom() {\r\n  const logoButtonHandler = () => console.log(\"You pressed on Logo\");\r\n  return (\r\n    <Button onClick={logoButtonHandler} variant=\"contained\">\r\n      Logo\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default LogoButtom;\r\n","import React from \"react\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { Box, Button, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    fontSize: \"50px\",\r\n  },\r\n});\r\n\r\nfunction SettingButton() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Button>\r\n      <Box display=\"flex\" alignItems=\"center\">\r\n        <SettingsIcon\r\n          classes={{\r\n            root: classes.root,\r\n          }}\r\n        />\r\n        SETTINGS\r\n      </Box>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default SettingButton;\r\n","import { Box, Container, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport LogoButtom from \"./LogoButtom\";\r\nimport SettingButton from \"./SettingButton\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"rgb(85, 218, 173)\",\r\n  },\r\n});\r\n\r\nfunction NavBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container\r\n      maxWidth=\"lg\"\r\n      classes={{\r\n        root: classes.root,\r\n      }}\r\n    >\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        <Box\r\n          width=\"80%\"\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <LogoButtom />\r\n          <SettingButton />\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction Line() {\r\n  return <div className=\"line\"></div>;\r\n}\r\n\r\nexport default Line;\r\n","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent } from \"react\";\r\n\r\ntype noteTextPorops = {\r\n  placeholder?: string;\r\n  onChange?: (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => void;\r\n  value?: string;\r\n  defaultValue?: string;\r\n};\r\n\r\nfunction NoteTextField(props: noteTextPorops) {\r\n  return (\r\n    <TextField\r\n      InputProps={{ disableUnderline: true }}\r\n      placeholder={props.placeholder}\r\n      fullWidth={true}\r\n      multiline={true}\r\n      id=\"standard-basic\"\r\n      onChange={props.onChange}\r\n      value={props.value}\r\n      defaultValue={props.defaultValue}\r\n    />\r\n  );\r\n}\r\n\r\nexport default NoteTextField;\r\n","import { Box, Button, Container, makeStyles } from \"@material-ui/core\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport Line from \"./Line\";\r\nimport NoteTextField from \"./NoteTextField\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    paddingBottom: \"40px\",\r\n    paddingTop: \"40px\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n  },\r\n  root: {\r\n    borderRadius: \"20px\",\r\n    borderColor: \"rgb(156, 156, 156)\",\r\n    borderWidth: \"1px\",\r\n    width: \"100%\",\r\n    borderStyle: \"solid\",\r\n    paddingBottom: \"30px\",\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n  },\r\n  inputs: {\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"20px\",\r\n  },\r\n});\r\ntype newNoteContainerProps = {\r\n  renderCallback: (arg: []) => void;\r\n};\r\nfunction NewNoteContainer(props: newNoteContainerProps) {\r\n  const classes = useStyles();\r\n  const [note, setNote] = React.useState(\"\");\r\n  const [subject, setSubject] = React.useState(\"\");\r\n\r\n  const createNoteHandler = () => {\r\n    console.log(note, subject);\r\n\r\n    if (!note || !subject) {\r\n      console.log(note, subject);\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n    const key = `${Math.random() * 100}`;\r\n    const value = note + \"~\" + subject;\r\n    localStorage.setItem(key, value);\r\n    setNote(\"\");\r\n    setSubject(\"\");\r\n    props.renderCallback([]);\r\n  };\r\n\r\n  const noteTextHandler = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setNote(e.target.value);\r\n  };\r\n  console.log(\"render\");\r\n  const subjectTextHandler = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setSubject(e.target.value);\r\n  };\r\n  return (\r\n    <Container\r\n      classes={{\r\n        root: classes.wrapper,\r\n      }}\r\n    >\r\n      <Box width=\"30%\">\r\n        <Container\r\n          classes={{\r\n            root: classes.root,\r\n          }}\r\n        >\r\n          <Button onClick={createNoteHandler} variant=\"text\">\r\n            Create new note\r\n          </Button>\r\n          <Line />\r\n          <Container\r\n            classes={{\r\n              root: classes.inputs,\r\n            }}\r\n          >\r\n            <NoteTextField\r\n              onChange={subjectTextHandler}\r\n              placeholder={\"Subject\"}\r\n              value={subject}\r\n            />\r\n            <Line />\r\n\r\n            <NoteTextField\r\n              value={note}\r\n              onChange={noteTextHandler}\r\n              placeholder={\"Note\"}\r\n            />\r\n          </Container>\r\n        </Container>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NewNoteContainer;\r\n","import { Box, Button, Container, Modal } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport React, { ChangeEvent } from \"react\";\r\nimport Line from \"../NewNote/Line\";\r\nimport NoteTextField from \"../NewNote/NoteTextField\";\r\ntype listItemProps = {\r\n  item: string;\r\n  currentKey: string;\r\n  setNewRender: (arg: []) => void;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    borderRadius: \"20px\",\r\n    borderColor: \"rgb(156, 156, 156)\",\r\n    borderWidth: \"1px\",\r\n    width: \"30%\",\r\n    borderStyle: \"solid\",\r\n    paddingBottom: \"30px\",\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n    cursor: \"pointer\",\r\n  },\r\n  modalRoot: {\r\n    marginTop: \"50px\",\r\n    borderRadius: \"20px\",\r\n    borderColor: \"rgb(156, 156, 156)\",\r\n    borderWidth: \"1px\",\r\n    display: \"flex\",\r\n    width: \"30%\",\r\n    borderStyle: \"solid\",\r\n    paddingBottom: \"30px\",\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n});\r\nfunction ListItem(props: listItemProps) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [changedNote, setChangedNote] = React.useState(\"\");\r\n  const [subject, setSubject] = React.useState(\"\");\r\n\r\n  const noteTextHandler = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setChangedNote(e.target.value);\r\n  };\r\n\r\n  const subjectTextHandler = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setSubject(e.target.value);\r\n  };\r\n  const classes = useStyles();\r\n  const textLine = props.item.split(\"~\");\r\n  const title = textLine[0];\r\n  const note = textLine[1];\r\n\r\n  const modalHandler = () => setOpen(!open);\r\n\r\n  const clipboardHandler = () => {\r\n    navigator.clipboard.writeText(note);\r\n  };\r\n\r\n  const deleteHandler = () => {\r\n    localStorage.removeItem(props.currentKey);\r\n    props.setNewRender([]);\r\n  };\r\n\r\n  const editHandler = () => {\r\n    localStorage.setItem(props.currentKey, subject + \"~\" + changedNote);\r\n    props.setNewRender([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box width=\"30%\" onClick={modalHandler}>\r\n        <Container\r\n          classes={{\r\n            root: classes.root,\r\n          }}\r\n        >\r\n          {title}\r\n          <Line />\r\n          {note}\r\n          <Line />\r\n        </Container>\r\n      </Box>\r\n      <Modal\r\n        open={open}\r\n        onClose={modalHandler}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        <>\r\n          <Container\r\n            classes={{\r\n              root: classes.modalRoot,\r\n            }}\r\n          >\r\n            <Box>\r\n              <NoteTextField\r\n                onChange={subjectTextHandler}\r\n                defaultValue={title}\r\n              />\r\n              <Line />\r\n              <NoteTextField onChange={noteTextHandler} defaultValue={note} />\r\n              <Line />\r\n            </Box>\r\n            <Box width=\"30%\">\r\n              <Button\r\n                onClick={editHandler}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                Save changes\r\n              </Button>\r\n              <Button\r\n                onClick={deleteHandler}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                Delete\r\n              </Button>\r\n              <Button\r\n                onClick={clipboardHandler}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                Copy note to clipboard\r\n              </Button>\r\n            </Box>\r\n          </Container>\r\n        </>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import ListItem from \"./ListItem\";\r\nimport React, { useEffect } from \"react\";\r\n\r\ntype listWrapperProps = {\r\n  dataForRerender: Array<any>;\r\n};\r\n\r\nfunction ListWrapper(props: listWrapperProps) {\r\n  const [items, setItems] = React.useState<Array<string>>([]);\r\n  const [keys, setKeys] = React.useState<Array<string>>([]);\r\n  const [newRender, setNewRender] = React.useState([]);\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  useEffect(() => {\r\n    const data: Array<string> = [];\r\n    const dataKeys: Array<string> = [];\r\n\r\n    for (const key in localStorage) {\r\n      dataKeys.push(key);\r\n      const item: string | null = localStorage.getItem(key);\r\n      if (item) {\r\n        data.push(item);\r\n      }\r\n    }\r\n    setItems(data);\r\n    setKeys(dataKeys);\r\n    setIsLoaded(true);\r\n  }, [newRender, props.dataForRerender]);\r\n  return (\r\n    <div className=\"list-item-wrapper\">\r\n      {isLoaded &&\r\n        items.map((item, i) => {\r\n          const currentKey = keys[i];\r\n          return (\r\n            <ListItem\r\n              key={currentKey}\r\n              item={item}\r\n              currentKey={currentKey}\r\n              setNewRender={setNewRender}\r\n            />\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListWrapper;\r\n","import React from \"react\";\r\nimport NavBar from \"../components/NavBar\";\r\nimport NewNoteContainer from \"../components/NewNote/NewNoteContainer\";\r\nimport ListWrapper from \"../components/NoteList/ListWrapper\";\r\n\r\nfunction MainPage() {\r\n  const [render, setRender] = React.useState<Array<any>>([]);\r\n\r\n  const renderCallback = () => {\r\n    setRender([]);\r\n  };\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <NewNoteContainer renderCallback={renderCallback} />\r\n      <ListWrapper dataForRerender={render} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainPage from \"./pages/MainPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}